// Prisma schema for Chef app

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

enum AssignmentRole {
  COOK
  HELPER
}

model Trip {
  id           String        @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  createdBy    String?       // User who created the trip
  creator      User?         @relation(fields: [createdBy], references: [id])
  mealSlots    MealSlot[]
  participants Participant[]
  recipes      Recipe[]
  invites      Invite[]
  groceryLists GroceryList[]
  createdAt    DateTime      @default(now())
}

model MealSlot {
  id          String        @id @default(cuid())
  tripId      String
  trip        Trip          @relation(fields: [tripId], references: [id])
  date        DateTime
  mealType    MealType
  assignments Assignment[]
  recipes     RecipeAssignment[]

  @@unique([tripId, date, mealType])
}

model Participant {
  id                 String                   @id @default(cuid())
  tripId             String
  trip               Trip                     @relation(fields: [tripId], references: [id])
  userId             String?                  // Optional link to authenticated user
  user               User?                    @relation(fields: [userId], references: [id])
  name               String
  email              String?                  // Email for ICS export, can be edited even if user linked
  cookingPreference  Int                      // -2..+2
  dietaryRestrictions String?                // Dietary restrictions and allergies
  availabilities     ParticipantAvailability[]
  assignments        Assignment[]
  createdAt          DateTime                 @default(now())
}

model ParticipantAvailability {
  id            String       @id @default(cuid())
  participantId String
  participant   Participant  @relation(fields: [participantId], references: [id])
  date          DateTime

  @@unique([participantId, date])
}

model Assignment {
  id            String       @id @default(cuid())
  mealSlotId    String
  mealSlot      MealSlot     @relation(fields: [mealSlotId], references: [id])
  participantId String
  participant   Participant  @relation(fields: [participantId], references: [id])
  role          AssignmentRole @default(COOK)
  createdAt     DateTime     @default(now())

  @@unique([mealSlotId, participantId])
}

model Recipe {
  id         String    @id @default(cuid())
  tripId     String
  trip       Trip      @relation(fields: [tripId], references: [id])
  title      String
  notes      String?
  serves     Int?
  createdAt  DateTime  @default(now())
  recipeAssignments RecipeAssignment[]
}

model RecipeAssignment {
  id         String   @id @default(cuid())
  mealSlotId String
  mealSlot   MealSlot @relation(fields: [mealSlotId], references: [id])
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([mealSlotId, recipeId])
}

model GroceryList {
  id                   String        @id @default(cuid())
  tripId               String
  trip                 Trip          @relation(fields: [tripId], references: [id])
  date                 DateTime
  servingsMultiplier   Float         @default(1.0)
  autoCalculateServings Boolean      @default(false)
  items                GroceryItem[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@unique([tripId, date])
}

model GroceryItem {
  id            String      @id @default(cuid())
  groceryListId String
  groceryList   GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade)
  name          String
  quantity      String?
  category      String?
  isChecked     Boolean     @default(false)
  createdAt     DateTime    @default(now())
}

model Invite {
  id             String   @id @default(cuid())
  tripId         String
  trip           Trip     @relation(fields: [tripId], references: [id])
  token          String   @unique
  expiresAt      DateTime?
  usesRemaining  Int?
  createdAt      DateTime @default(now())
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]    // User-created trips
  participants  Participant[] // User's participation in trips
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
